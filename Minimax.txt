private void trainAgainstMiniMax() {
  NNGame game;
  NNPlayfield field;
  byte endSituation;
  resetPlayer();
  for(NNPlayer p : nnPlayer) {
//			//starts first
//			new NNGame(p, opponent)
//			.start();
//			//and as second
//			new NNGame(opponent, p)
//			.start();
    //starts first
    game = new NNGame(p, opponent);
    game.start();
    endSituation = game.getSituation();
    field = game.getField();
    if(endSituation == 1) {
      p.addFitness(1000);
      System.out.print("Warum?");
    }
    if(endSituation == 3) {
      p.addFitness(100);
    }

    p.addFitness(12 - field.getFigureQuantityOfColor(false));

    //and as second
    game = new NNGame(opponent, p);
    game.start();
    endSituation = game.getSituation();
    field = game.getField();
    if(endSituation == 2) {
      p.addFitness(1000);
    }
    if(endSituation == 3) {
      p.addFitness(100);
      System.out.print("Warum?");
    }
    p.addFitness(12 - field.getFigureQuantityOfColor(true));
  }
  sortAndCalculateSum();
  for(int i = nnspecs.nnSurviver; i < nnspecs.nnQuantity; i++){
      nnPlayer[i].getNet().childFrom(weightedRandomSelection().getNet(), weightedRandomSelection().getNet());
      nnPlayer[i].getNet().changeAll(changePercentage);
    }
  changePercentage *= (1 - learnrate);
}
